<?xml version="1.0" encoding="UTF-8" ?>

<Module>

 <ModulePrefs title="Revel Transit Gadget" description="Displays YRT Transit info for a stop" author="RevelDigital" background="transparent">

 <UserPref name="user_stop_id" display_name="Stop Name ex:(RICHMOND HILL CENTRE)" default_value="" />
 <UserPref name="agency_key" display_name="Agency Key ex:(YRT)" default_value="" />
 <UserPref name="font_size" display_name="Font Size" default_value="25px" />
 <UserPref name="text_color" display_name="Text Color" default_value="white" />
 <UserPref name="num_rows" display_name="Number of rows displayed at a time" required="true" default_value="25" />
 <UserPref name="rdW" display_name="Width" required="true" default_value="280" datatype="hidden" />
 <UserPref name="rdH" display_name="Height" required="true" default_value="190" datatype="hidden" />

 </ModulePrefs>
<Content type="html">

<![CDATA[
 <html>

<head>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    <script src="https://reveldigital.github.io/reveldigital-gadgets/third-party/moment-with-locales.min.js" type="text/javascript"></script>
    <script src="https://reveldigital.github.io/reveldigital-gadgets/third-party/moment-timezone-with-data.min.js" type="text/javascript"></script>
    <style>
        #myDiv {
            width: __UP_rdW__px;
            height: __UP_rdH__px;
            text-align:center;
        }

        #paragraph {
            width: 100%;
            height: 100%;
            margin: auto;
            font-size: __UP_font_size__px;
            color: __UP_text_color__;
        }

        body {
            background: transparent;
        }
    </style>
</head>


<body>
    <div id="myDiv">
        <p id="paragraph"></p>
    </div>
    <script>
        // PREFS
        var prefs = new gadgets.Prefs();
        var display_time = 60;
        var unvarified_stopid = prefs.getString("user_stop_id");
        var stopid = unvarified_stopid.replace('&', '%26'); //'RICHMOND HILL CENTRE';
        var agency_key = prefs.getString("agency_key");
        var numRows = prefs.getString("num_rows"); // 25
        stopid = stopid.toUpperCase();
        // GLOBALS
        var timeout = 1; // MIGHT BECOME A PREF
        var stoplist = [];
        var tomorrow_stoplist = [];

        moment.locale("__MSG_Lang__");

        // INIT GLOBALS
        if (typeof Client != "undefined" && typeof(Client.getDeviceTimeZoneName) == "function") {
            moment.tz.setDefault(Client.getDeviceTimeZoneName());
            console.log(Client.getDeviceTimeZoneName());
        }
        var curr_day = moment();
        var tomorrow = moment().add(1, 'days');

        var cur_time = curr_day.utc().format();
        loadStops(cur_time, false);

        // Check every minute for expired stoptimes
        $(function() {
            window.setInterval(function() {
                updateList();
            }, timeout * 60000);
        });

        // Check every hour for next days stops until tomorrow_stoplist is populated
        // Also checks if it is the next day and updates the correct values.
        $(function() {
            window.setInterval(function() {
                console.log("CHECKING IF TOMORROW LIST IS UPTO DATE");
                if (tomorrow_stoplist.length < 1 || tomorrow_stoplist == undefined) {
                    console.log("TOMORROW LIST NOT UP TO DATE: UPDATING");
                    var tomorrow_str = tomorrow.utc().format();
                    loadStops(tomorrow_str, true);
                }
                var now = moment();
                if (now > tomorrow) {
                    console.log("MOVNG TO THE NEXT DAY");
                    tomorrow = now.add(1, 'day');
                    tomorrow_stoplist = [];
                }
            }, 60 * 60000);
        });

        function loadStops(date, loadTomorrow) {
            $.ajax({
                // TEST URL
                //url: "http://localhost:5000/?agency_key=" + agency_key + "&stop_id=" + stopid + "&current_time=" + date,
                // PROD URL
                url: "https://nameless-oasis-95014.herokuapp.com/?agency_key=" + agency_key + "&stop_id=" + stopid + "&current_time=" + date,
                type: 'GET',
                dataType: 'json', // added data type
                success: function(res) {
                    if (loadTomorrow) {
                        // load stoptimes for tomorrow
                        for (var i = 0; len = res.length, i < len; i++) {
                            stoplist.push(res[i]);
                            tomorrow_stoplist.push(res[i]);
                        }
                        console.log(stoplist);
                    } else {
                        // load stoptimes for current day -- only on initialization
                        for (var i = 0; len = res.length, i < len; i++) {
                            stoplist.push(res[i]);
                        }
                        // Create table for the first time
                        console.log(stoplist);
                        initalizeTable(stoplist);
                    }
                }
            });
        }


       function addRow(row) {
            var paragraph = document.getElementById("paragraph");
            var now = moment();
            var departure_time = moment(row.departure_time);
            // Get minutes difference b/t now and the departure time
            var diff = departure_time - now;
            var minutes = Math.round((diff / 1000) / 60);
            paragraph.innerHTML = minutes;
        }

        function initalizeTable(res) {
            var now = moment();
            var thirty_min_ahead = moment().add(30, 'mins');

            var ct = 0;
            var templist = [];
            var isFirst = true;
            for (var i = 0; len = res.length, i < len; i++) {
                var departure_time = moment(res[i].departure_time);
                if (departure_time > now) {
                    templist.push(res[i]);
                    if(isFirst){
                        addRow(res[i]);
                        isFirst = false;
                    }
                }
            }
            stoplist = templist;
            console.log(stoplist);
        }


        function formatAMPM(date) {
            var hours = date.getHours();
            var minutes = date.getMinutes();
            var ampm = hours >= 12 ? 'PM' : 'AM';
            hours = hours % 12;
            hours = hours ? hours : 12; // the hour '0' should be '12'
            minutes = minutes < 10 ? '0' + minutes : minutes;
            var strTime = hours + ':' + minutes + ' ' + ampm;
            return strTime;
        }


        function updateList() {
            var paragraph = document.getElementById("paragraph");
            var now = moment();

            numDeleted = 0;
            // Loop through the table rows and check if the stop times have expired
            current_index = 0;
            for (var x = 1; x < stoplist.length; x++) {
                var departure_time = moment(stoplist[current_index].departure_time);
                if (now > departure_time) {
                    numDeleted++;
                }
                current_index++;
            }
            // Replace deleted rows with new ones
            for (var y = 0; y < numDeleted; y++) {
                console.log("delete: " + stoplist[0]);
                stoplist.splice(0, 1);
				if(stoplist[numRows - 1]){
					addRow(stoplist[numRows - 1]);
					console.log("add: " + stoplist[numRows - 1]);
				}else{
					console.log("Stoptimess in array < set ammout");
				}
            }
            var departure_time = moment(stoplist[0].departure_time);
            var diff = departure_time - now;
            var minutes = Math.round((diff / 1000) / 60);
            paragraph.innerHTML = minutes;
        }
    </script>
</body>

</html>
 ]]>
 </Content>

</Module>
